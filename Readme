Secure Login and Registration System
Overview
This is a full-stack web application built to demonstrate a secure and efficient user authentication and data management system. It features a complete user lifecycle, from registration and login to a personalized dashboard where users can perform full CRUD (Create, Read, Update, Delete) operations on their data. The system is built with a focus on modern security practices and is designed to be easily set up in a local development environment.

Features
üîê Authentication & Security
Secure user registration and login
Password hashing with PHP's password_hash()
Session management with timeout protection
Role-based access control (Admin/User)

üë• User Management
Complete CRUD operations for users
User profiles with additional information (phone, address, bio)
Bulk user operations (admin only)
User search functionality
Profile image placeholder system

üé® Modern UI/UX
Responsive Bootstrap 5 design
Font Awesome icons
Interactive elements and animations
Mobile-friendly interface
Professional dashboard layout

üìä Dashboard Features
User statistics and analytics
Quick actions panel
Real-time form validation


Technologies Used
PHP: The backend logic is built using PHP 8.
Framework: The system leverages a PHP framework such as Laravel for its robust structure and built-in security features.
Front-End: The front-end styling is powered by Bootstrap 5 to provide a clean, responsive, and modern user interface.
Database: A MySQL database is used for data persistence.

File Structure & Functions
Core Classes
classes/database.php
- Database Configuration Class
- Establishes secure PDO connection to MySQL database
- Configures PDO with proper error handling and security settings
- Handles connection failures gracefully
- Uses prepared statements to prevent SQL injection

classes/Auth.php
Authentication Management Class
- User Registration: Validates input, checks for duplicates, hashes passwords
- User Login: Authenticates credentials, manages sessions
- Session Management: Handles session timeouts, security parameters

classes/UserCRUD.php
User Data Operations Class
- Create: Add new user profiles with extended information
- Read: Fetch user data with profile information, search functionality
- Update: Modify user accounts and profiles
- Delete: Remove users with safety checks
- Bulk Operations: Handle multiple user actions simultaneously
- Permission Checks: Ensure users can only delete appropriate accounts

Frontend Pages
index.php - Login Page
- User authentication interface
- Password visibility toggle
- Form validation
- Redirect logic for authenticated users
- Error/success message handling

register.php - Registration Page
- New user account creation
- Password confirmation matching
- Real-time validation feedback
- Terms of service acceptance
- Comprehensive form validation

dashboard.php - Main Dashboard
- User management interface for admins
- Search and filter functionality
- Bulk user operations
- User statistics display
- Role-based feature access
- Responsive data tables

profile.php - User Profile Management
- Personal profile editing
- Account information display
- Profile completeness indicators
- Activity tracking
- Security status information

create_user.php - Admin User Creation
- Admin-only user creation interface
- Profile information setup
- Success/error feedback

edit_user.php - User Editing Interface
- User information modification
- Profile data updates

view_user.php - User Details Display
- Comprehensive user information view
- Contact information display
- Account activity tracking

delete_user.php - User Deletion Interface
- Secure user deletion process
- Confirmation requirements
- Admin protection

Database Structure
database.sql - Database Schema
Tables:
users: Core user authentication data (username, email, password, role)
user_profiles: Extended profile information (phone, address, bio, profile image)
user_sessions: Session management tracking

Utility Files
generate_hash.php
- Password hash generation utility
- Used for creating admin passwords
- Demonstrates proper password hashing

Installation Guide
Step 1: Clone the Repository
git clone [repository-url]
cd [project-folder-name]

Step 2: Start XAMPP Services
Open XAMPP Control Panel
Start Apache server
Start MySQL server

Step 3: Move Project to htdocs
Copy the entire project folder to your XAMPP's htdocs directory
Windows: C:\xampp\htdocs\
macOS: /Applications/XAMPP/htdocs/
Linux: /opt/lampp/htdocs/

Step 4: Database Setup
Open your web browser and navigate to http://localhost/phpmyadmin
Import the database.sql file to create database (user_management)

Step 4. Access the system.
Navigate to: http://localhost/[your-project-folder-name]/
The system should now be accessible


To add admin in database:
USE user_management;
INSERT INTO users (username, email, password, full_name, role) VALUES ('admin', 'admin@example.com', '$2y$12$HcU8kiqDQ5wRid7oEDAUb.TaAc.dZGkIGu.AwphZHrIiVsJJuL3Vm', 'Admin User', 'admin');

For admin account:
Username = admin
Password = admin123

Troubleshooting
Ensure both Apache and MySQL services are running in XAMPP
Check that the database was imported successfully
